{"version":3,"sources":["Components/Card.js","Components/Announcement.js","Components/ScoreBoard.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","Image","onClick","handleClick","index","src","playingCard","imagePath","alt","responsive","Announcement","state","score","highScore","styles","fontSize","color","float","ScoreBoard","style","d3","require","App","cards","cardsList","checkClick","clickedCardID","clicked","checkHighScore","_this","resetClicks","forEach","card","shuffleCards","shuffle","_this$state","setState","_this2","this","Grid","Row","PageHeader","Components_Announcement","Components_ScoreBoard","map","Col","xs","md","key","id","Components_Card","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oiCAQeA,EALF,SAACC,GACV,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,QAAS,kBAAIL,EAAMM,YAAYN,EAAMO,QAAQC,IAAKR,EAAMS,YAAYC,UAAWC,IAAI,eAAeC,YAAU,KCK5GC,EARM,SAAAb,GACjB,OAAuB,IAApBA,EAAMc,MAAMC,OAAqC,IAAxBf,EAAMc,MAAME,UAC7Bf,EAAAC,EAAAC,cAAA,wDAEAF,EAAAC,EAAAC,cAAA,4DCGTc,EAAQ,CACVF,MAAO,CACHG,SAAS,QAEbF,UAAW,CACPG,MAAM,OACNC,MAAM,UAICC,EAjBI,SAAArB,GAAK,OACpBC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMmB,MAAOL,EAAOF,OAApB,UAAmCf,EAAMc,MAAMC,OAC/Cd,EAAAC,EAAAC,cAAA,QAAMmB,MAAOL,EAAOD,WAApB,cAA2ChB,EAAMc,MAAME,aCE3DO,EAAKC,EAAQ,IA+EFC,6MA5EbX,MAAQ,CACNY,MAAOC,EACPZ,MAAO,EACPC,UAAW,KAIbY,WAAa,SAACC,EAAcH,GAC1B,OAAoC,IAAjCA,EAAMG,GAAeC,UAGtBJ,EAAMG,GAAeC,SAAU,GACxB,MAIXC,eAAiB,SAAChB,GAChB,OAAGA,EAAMiB,EAAKlB,MAAME,aAOtBiB,YAAc,SAACP,GACbA,EAAMQ,QAAQ,SAASC,GACrBA,EAAKL,SAAQ,OAKjBM,aAAe,SAAAV,GACbA,EAAQH,EAAGc,QAAQX,MAGrBpB,YAAc,SAAAuB,GAAiB,IAAAS,EACGN,EAAKlB,MAAhCY,EADwBY,EACxBZ,MAAOX,EADiBuB,EACjBvB,MAAOC,EADUsB,EACVtB,WAGuB,IAAvCgB,EAAKJ,WAAWC,EAAcH,IAC5BM,EAAKD,eAAehB,KACrBC,EAAYD,GAEdiB,EAAKC,YAAYP,GACjBX,EAAM,GAENA,IAIFiB,EAAKI,aAAaV,GAGlBM,EAAKO,SAAS,CAACb,QAAOX,QAAOC,uFAGtB,IAAAwB,EAAAC,KACP,OACExC,EAAAC,EAAAC,cAACuC,EAAA,EAAD,KACEzC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,KACE1C,EAAAC,EAAAC,cAACyC,EAAA,EAAD,yBACmB3C,EAAAC,EAAAC,cAAC0C,EAAD,CAAc/B,MAAO2B,KAAK3B,QAD7C,IACsDb,EAAAC,EAAAC,cAAC2C,EAAD,CAAYhC,MAAO2B,KAAK3B,UAGhFb,EAAAC,EAAAC,cAACwC,EAAA,EAAD,KACGF,KAAK3B,MAAMY,MAAMqB,IAAI,SAACZ,EAAK5B,GAAN,OACpBN,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGC,IAAKhB,EAAKiB,IAC3BnD,EAAAC,EAAAC,cAACkD,EAAD,CAAM/C,YAAakC,EAAKlC,YAAaC,MAAOA,EAAOE,YAAa0B,gBApE5DmB,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6d762525.chunk.js","sourcesContent":["import React from 'react'\nimport {Image} from 'react-bootstrap'\n\nconst Card = (props) => {\n    return(\n        <Image onClick={()=>props.handleClick(props.index)} src={props.playingCard.imagePath} alt=\"playing Card\" responsive/> \n    )   \n}\nexport default Card","import React from 'react'\n\nconst Announcement = props=> {\n    if(props.state.score===0 && props.state.highScore!==0) {\n        return <small>Nice Try! Click on a card to Try Again.</small> \n    } else {\n        return <small>Clicked on each image exactly once to win!</small>\n    }\n}\n\nexport default Announcement\n","import React from 'react'\n\nconst ScoreBoard = props=> (\n    <div>\n        <span style={styles.score}>Score: {props.state.score}</span>\n        <span style={styles.highScore}>HighScore: {props.state.highScore}</span>\n    </div>\n)\n\nconst styles= {\n    score: {\n        fontSize:'30px'\n    },\n    highScore: {\n        color:'blue',\n        float:'right'\n    }\n}\n\nexport default ScoreBoard","import React, { Component } from 'react';\nimport './App.css';\nimport {PageHeader, Grid, Row, Col} from 'react-bootstrap'\nimport cardsList from './cards.json'\nimport Card from './Components/Card'\nimport Announcement from  './Components/Announcement'\nimport ScoreBoard from './Components/ScoreBoard'\nvar d3 = require(\"d3-array\")\n\nclass App extends Component {\n  state = {\n    cards: cardsList,\n    score: 0,\n    highScore: 0\n  }\n\n  //This function checks if the clicked Card has been clicked before\n  checkClick = (clickedCardID,cards) => {\n    if(cards[clickedCardID].clicked === true) {\n      return true\n    } else {\n      cards[clickedCardID].clicked = true\n      return false\n    }\n  }\n\n  checkHighScore = (score) => {\n    if(score>this.state.highScore) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  resetClicks = (cards) => {\n    cards.forEach(function(card) {\n      card.clicked=false\n    })\n  }\n\n  //This function uses a Fisher-Yates shuffling algorithm\n  shuffleCards = cards => {\n    cards = d3.shuffle(cards)\n  }\n\n  handleClick = clickedCardID => {\n    let {cards, score, highScore} = this.state\n\n    //check to see if the card has been clicked before, increment score if not, reset if yes\n    if(this.checkClick(clickedCardID,cards)===true) {\n      if(this.checkHighScore(score)) {\n        highScore = score\n      }\n      this.resetClicks(cards)\n      score=0\n    } else {\n      score++  \n    } \n    \n    //shuffle cards before setting state\n    this.shuffleCards(cards)\n\n    //this code stores the array, updates the clickedCard, shuffles the entire array, and sets the new array in state\n    this.setState({cards, score, highScore})\n  } \n\n  render() {\n    return (\n      <Grid>\n        <Row>\n          <PageHeader>\n            The Clicky Game! <Announcement state={this.state}/> <ScoreBoard state={this.state}/>\n          </PageHeader>\n        </Row>\n        <Row>\n          {this.state.cards.map((card,index)=>(\n            <Col xs={6} md={2} key={card.id}>\n              <Card handleClick={this.handleClick} index={index} playingCard={card} />\n            </Col>\n          ))}\n        </Row>\n      </Grid>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}